@page "/finder"
@using System.Text.Json;
@using System.Text;
@using Microsoft.Extensions.Caching.Memory;
@using MongoDB.Bson;
@using MongoDB.Bson.Serialization;
@using MongoDB.Driver;
@using Newtonsoft.Json;
@using RestaurantData.DTOs;
@using RestaurantData.Services;
@inject FinderService FinderService
<h3>Filters</h3>

<FluentSwitch @bind-Value=VegetarianFriendly style="margin-inline-end: 12px;">Vegetarian Friendly</FluentSwitch>
<FluentSwitch @bind-Value=VeganFriendly style="margin-inline-end: 12px;">Vegan Friendly</FluentSwitch>

<FluentDialog Hidden=@RestaurantsExist>
    <h1>Warning</h1>
    <p>The filter options you have chosen do not have any matches. Please adjust your search settings and search again.</p>
    <FluentButton @onclick="() => RestaurantsExist = true">OK</FluentButton>
</FluentDialog>

<br /> <br />
<b><FluentDivider/></b>
<br />

<h3>Search</h3>
<FluentButton Appearance=Appearance.Outline @onclick="() => SearchRestaurant()">Find Restaurant</FluentButton>
<br /> <br />
<p role="status"><b>Name:</b> @Name</p>
<p role="status"><b>Cuisine:</b> @Cuisine</p>
<p role="status"><b>Dining Experience:</b> @DiningExperience</p>
<p role="status"><b>Review Score: </b>@Review</p>

@if (Loading)
{
    <FluentProgressRing></FluentProgressRing>
}

@code {
    public string Name { get; set;  }
    public string Review { get; set; }
    public string Cuisine { get; set; }
    public string DiningExperience { get; set; }
    static HttpClient client { get; set; }

    public bool VegetarianFriendly { get; set; }
    public bool VeganFriendly { get; set; }
    public bool Loading { get; set; }
    public bool RestaurantsExist { get; set; } = true;

    private static readonly String OutOfFive = " / 5";

    public List<MongoDatum> RestaurantMasterList { get; set; }

    public async Task SearchRestaurant()
    {
        RestaurantsExist = false;
        Loading = true;
        RestaurantMasterList = await FinderService.GetMasterList();

        var filteredRestaurants = FilterByCuisine(RestaurantMasterList);

        if (filteredRestaurants is null)
            return;

        Random randomNumberGenerator = new Random();
        var randomRestaurant = filteredRestaurants[randomNumberGenerator.Next(filteredRestaurants.Count)];

        PopulateUI(randomRestaurant);
        Loading = false;
    }

    private List<MongoDatum> FilterByCuisine(List<MongoDatum> restaurants)
    {
        var filteredRestaurants = new List<MongoDatum>();

        if(VegetarianFriendly)
            filteredRestaurants.AddRange(restaurants.Where(r => r.cuisine.Any(c => c.name.Equals("Vegetarian Friendly"))).ToList());

        if(VeganFriendly)
            restaurants.AddRange(restaurants.Where(r => r.cuisine.Any(c => c.name.Equals("Vegan Options"))).ToList());

        if (filteredRestaurants.Count == 0)
        {
            RestaurantsExist = false;
            return null;
        }
        else
            return filteredRestaurants;
    }

    private void PopulateUI(MongoDatum randomRestaurant)
    {
        Name = randomRestaurant.name;

        if (randomRestaurant.rating is null)
            Review = "Unknown";
        else
            Review = $"{randomRestaurant.rating}".Trim() + OutOfFive;
        
        var cuisine = FlattenStrings(randomRestaurant.cuisine.Select(c => c.name).ToList());
        if (cuisine.Length == 0)
            Cuisine = "Unknown";
        else
            Cuisine = cuisine;

        var diningExperience = FlattenStrings(randomRestaurant.subcategory.Select(s => s.name).ToList());
        if (diningExperience.Length == 0)
            DiningExperience = "Unknown";
        else
            DiningExperience = diningExperience;
    }

    public string FlattenStrings(List<String> stringList)
    {
        var flattenedString = new StringBuilder();
        foreach (var s in stringList)
        {
            flattenedString.Append(s);
            flattenedString.Append(", ");
        }
        return flattenedString.ToString().Trim().Trim(',');
    }
}
