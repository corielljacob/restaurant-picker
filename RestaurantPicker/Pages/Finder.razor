@page "/finder"
@using System.Text.Json;
@using System.Text;
@using Microsoft.Extensions.Caching.Memory;
@using MongoDB.Bson;
@using MongoDB.Bson.Serialization;
@using MongoDB.Driver;
@using Newtonsoft.Json;
@using RestaurantData.DTOs;
@using RestaurantData.Services;
@inject FinderService FinderService
<h3>Filters</h3>

<FluentSwitch @bind-Value=VegetarianFriendly style="margin-inline-end: 12px;">Vegetarian Friendly</FluentSwitch>
<FluentSwitch @bind-Value=VeganFriendly style="margin-inline-end: 12px;">Vegan Friendly</FluentSwitch>

<br /> <br />
<b><FluentDivider/></b>
<br />

<h3>Search</h3>
<FluentButton Appearance=Appearance.Outline @onclick="() => SearchRestaurant()">Find Restaurant</FluentButton>
<br /> <br />
<p role="status"><b>Name:</b> @Name</p>
<p role="status"><b>Review Score: </b>@Review</p>

@if (Loading)
{
    <FluentProgressRing></FluentProgressRing>
}

@code {
    public string Name { get; set;  }
    public string Review { get; set; }
    static HttpClient client { get; set; }

    public bool VegetarianFriendly { get; set; }
    public bool VeganFriendly { get; set; }
    public bool Loading { get; set; }

    private readonly IMemoryCache _memoryCache;

    public List<MongoDatum> RestaurantMasterList { get; set; }

    public async Task SearchRestaurant()
    {
        Loading = true;
        RestaurantMasterList = await FinderService.GetMasterList();

        var filteredRestaurants = FilterByCuisine(RestaurantMasterList);

        Random randomNumberGenerator = new Random();
        var randomRestaurant = filteredRestaurants[randomNumberGenerator.Next(filteredRestaurants.Count)];

        Name = randomRestaurant.name;
        Review = randomRestaurant.rating;
        Loading = false;
    }

    private List<MongoDatum> FilterByCuisine(List<MongoDatum> restaurants)
    {
        var filteredRestaurants = new List<MongoDatum>();

        // Cache the master list of restaurants
        if (RestaurantMasterList == null)
            RestaurantMasterList = restaurants;

        if(VegetarianFriendly)
            filteredRestaurants.AddRange(restaurants.Where(r => r.cuisine.Any(c => c.name.Equals("Vegetarian Friendly"))).ToList());

        if(VeganFriendly)
            restaurants.AddRange(restaurants.Where(r => r.cuisine.Any(c => c.name.Equals("Vegan Options"))).ToList());

        if (filteredRestaurants.Count == 0)
            return restaurants;
        else
            return filteredRestaurants;
    }

    
}
